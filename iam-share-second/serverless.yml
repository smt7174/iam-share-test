# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: iam-share-second
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: nodejs12.x

  # you can overwrite defaults here
  stage: dev
  region: ap-northeast-1
  profile: default

  apiGateway:
    restApiId: ${cf:${self:custom.parentStackName}.apiGatewayRestApiId} # REST API resource ID. Default is generated by the framework
    restApiRootResourceId: ${cf:${self:custom.parentStackName}.apiGatewayRestApiRootResourceId} # Root resource, represent as / path
    #websocketApiId: cccccccc # Websocket API resource ID. Default is generated by the framework
    restApiResources:
      /s3: ${cf:${self:custom.parentStackName}.apiGatewayResourcesS3}
    #description: Some Description # optional - description of deployment history

# you can add statements to the Lambda function's IAM Role here
  # iamRoleStatements:
  #   - Effect: "Allow"
  #     Action:
  #       - "s3:*"
  #     Resource: ${cf:${self:custom.parentStackName}.SplitDeployFirstS3Arn}
  #   - Effect: "Allow"
  #     Action:
  #       - "dynamodb:*"
  #     Resource: ${cf:${self:custom.parentStackName}.SplitDeployFirstDynamoArn}

custom:
  parentStackName: iam-share-first-dev
  projectName: iam-share-test
# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  include:
#    - include-me.js
#    - include-me-dir/**
  exclude:
    - node_modules
    - node_modules/**
    - restClient.txt

functions:
  GetObject:
    handler: iamTest.index
    name: GetObject
    role: ${cf:${self:custom.parentStackName}.iamRoleS3GetObjectArn}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /s3/get
          method: get

  ListObjects:
    handler: iamTest.index
    name: ListObjects
    role: ${cf:${self:custom.parentStackName}.iamRoleS3ListObjectsArn}
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - http:
          path: /s3/list
          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
  #Resources:
    # SuzukimaBucket:
    #   Type: AWS::S3::Bucket
    #   Properties:
    #     BucketName: suzukima-splitdeployfirst-bucket

    # SuzukimaDynamo:
    #   Type: AWS::DynamoDB::Table
    #   Properties:
    #     TableName: suzukima-splitdeployfirst-dynamo
    #     AttributeDefinitions:
    #       -
    #         AttributeName: app_name
    #         AttributeType: S
    #       -
    #         AttributeName: date_time_num
    #         AttributeType: N
    #     KeySchema:
    #       -
    #         AttributeName: app_name
    #         KeyType: HASH
    #       -
    #         AttributeName: date_time_num
    #         KeyType: RANGE
    #     ProvisionedThroughput:
    #       ReadCapacityUnits: 1
    #       WriteCapacityUnits: 1
    #     StreamSpecification:
    #       StreamViewType: NEW_IMAGE
    #     TimeToLiveSpecification:
    #       AttributeName: ttl
    #       Enabled: true

  # Outputs:
  #   SplitDeployFirstS3Arn:
  #     Value:
  #       'Fn::GetAtt': [SuzukimaBucket, Arn]
  #     Export:
  #       Name: ${self:service}-SplitDeployFirstS3Arn-${self:provider.stage}
  #   SplitDeployFirstDynamoArn:
  #     Value:
  #       'Fn::GetAtt': [SuzukimaDynamo, Arn]
  #     Export:
  #       Name: ${self:service}-SplitDeployFirstDynamoArn-${self:provider.stage}
  #   apiGatewayRestApiId:
  #     Value:
  #       Ref: ApiGatewayRestApi
  #     Export:
  #       Name: ${self:service}-restApiId-${self:provider.stage}
  #   apiGatewayRestApiRootResourceId:
  #     Value:
  #       'Fn::GetAtt': [ApiGatewayRestApi, RootResourceId]
  #     Export:
  #       Name: ${self:service}-rootResourceId-${self:provider.stage}
  #   apiGatewayResourcesSplitDeployFirst:
  #     Value:
  #       Ref: ApiGatewayResourceSplitdeployfirst
  #     Export:
  #       Name: ${self:service}-ResourcesSplitDeployFirst-${self:provider.stage}


